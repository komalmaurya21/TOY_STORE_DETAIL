create database TOY_SALES

USE TOY_SALES
CREATE TABLE STORES
(Store_ID VARCHAR(MAX),	Store_Name VARCHAR(MAX),	Store_City	VARCHAR(MAX),Store_Location	VARCHAR(MAX),Store_Open_Date VARCHAR(MAX))

BULK INSERT  STORES
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\stores.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)

CREATE TABLE SALES
(Sale_ID VARCHAR(MAX),	Date VARCHAR(MAX),	Store_ID VARCHAR(MAX),	Product_ID	VARCHAR(MAX),Units VARCHAR(MAX))

BULK INSERT  SALES
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\sales.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)

CREATE TABLE PRODUCTS
(Product_ID VARCHAR(MAX),	Product_Name VARCHAR(MAX),	Product_Category VARCHAR(MAX),	Product_Cost VARCHAR(MAX),	Product_Price VARCHAR(MAX))

BULK INSERT PRODUCTS
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\products.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)


CREATE TABLE INVENTORY
(Store_ID VARCHAR(MAX),	Product_ID VARCHAR(MAX),	Stock_On_Hand VARCHAR(MAX))


BULK INSERT INVENTORY
FROM 'C:\Users\ASUS\OneDrive\Desktop\SQL\inventory.csv'
WITH (FIELDTERMINATOR=',',ROWTERMINATOR='\n',FIRSTROW=2)

---CHECK DATATYPE

SELECT COLUMN_NAME,DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME IN ('SALES','STORES','PRODUCTS','INVENTORY')


ALTER TABLE STORES
ALTER COLUMN STORE_ID INT

ALTER TABLE STORES
ALTER COLUMN STORE_OPEN_DATE DATE 

Update stores set store_open_date=try_convert(date,store_open_date,103) 



ALTER TABLE SALES
ALTER COLUMN SALE_ID INT 

SELECT *FROM SALES
WHERE ISNUMERIC(SALE_ID)=0

UPDATE SALES SET Sale_ID='10000'
WHERE Sale_ID='1-0000'

ALTER TABLE SALES
ALTER COLUMN DATE DATE 

Update SALES set DATE=try_convert(date,DATE,103) 


ALTER TABLE SALES
ALTER COLUMN STORE_ID INT

ALTER TABLE SALES
ALTER COLUMN PRODUCT_ID INT

ALTER TABLE SALES
ALTER COLUMN UNITS INT

SELECT *FROM SALES
WHERE ISNUMERIC(UNITS)=0

UPDATE SALES SET UNITS=CASE WHEN UNITS LIKE '%[A%,*&^$#@:]%' THEN REPLACE(REPLACE(UNITS,SUBSTRING(UNITS,PATINDEX('%[A%,*&^$#@:]%',UNITS),1),''),'-','')
ELSE UNITS END

SELECT*FROM PRODUCTS

ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_ID INT

UPDATE PRODUCTS SET Product_ID=CASE WHEN Product_ID LIKE '%[A%,*&^$#@:]%'  THEN REPLACE(REPLACE(PRODUCT_ID,SUBSTRING(PRODUCT_ID,PATINDEX('%[A%,*&^$#@:]%' ,PRODUCT_ID),1),''),'-','')
ELSE Product_ID END

ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_COST DECIMAL(5,2)

UPDATE PRODUCTS SET Product_Cost=REPLACE(PRODUCT_COST,'$','')

ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_PRICE DECIMAL(7,2)

UPDATE PRODUCTS SET Product_Price=REPLACE(PRODUCT_PRICE,'$','')

ALTER TABLE INVENTORY
ALTER COLUMN STORE_ID INT

ALTER TABLE INVENTORY
ALTER COLUMN PRODUCT_ID INT

ALTER TABLE INVENTORY
ALTER COLUMN STOCK_ON_HAND INT



--CHECK DUPLICATE AND REMOVE [PRODUCTS]

WITH CHECK_DUPLICATES AS(SELECT *, ROW_NUMBER() OVER (PARTITION BY PRODUCT_ID,PRODUCT_NAME ORDER BY PRODUCT_ID ) 'ROW_NUM'
FROM PRODUCTS)
SELECT *FROM CHECK_DUPLICATES
WHERE ROW_NUM>1


WITH CHECK_DUPLICATES AS(SELECT *, ROW_NUMBER() OVER (PARTITION BY PRODUCT_ID,PRODUCT_NAME ORDER BY PRODUCT_ID ) 'ROW_NUM'
FROM PRODUCTS)
DELETE FROM CHECK_DUPLICATES
WHERE ROW_NUM>1

--CHECK DUPLICATE AND REMOVE [STORES]
WITH CHECK_DUPLICATES AS(SELECT *, ROW_NUMBER() OVER (PARTITION BY STORE_ID,STORE_NAME ORDER BY STORE_ID) 'ROW_NUM'
FROM STORES)
SELECT *FROM CHECK_DUPLICATES
WHERE ROW_NUM>1

--CHECK DUPLICATE AND REMOVE [SALES]

WITH CHECK_DUPLICATES AS(SELECT *,ROW_NUMBER() OVER (PARTITION BY SALE_ID,DATE, UNITS ORDER BY SALE_ID) 'ROW_NUM'
FROM SALES)
SELECT *FROM CHECK_DUPLICATES
WHERE ROW_NUM>1

--CHECK DUPLICATE AND REMOVE [INVENTORY]

WITH CHECK_DUPLICATES AS(SELECT *, ROW_NUMBER() OVER (PARTITION BY STORE_ID,PRODUCT_ID ORDER BY STORE_ID) 'ROW_NUM'
FROM INVENTORY)
SELECT *FROM CHECK_DUPLICATES
WHERE ROW_NUM>1

--ANALYSE OVER TIME SALES TREND
SELECT DATE,SUM(UNITS) AS 'SALES_TREND'
FROM SALES
GROUP BY DATE
ORDER BY SALES_TREND

--ANALYSE OVER MONTH SALES_TRENDS

SELECT DATENAME(MONTH,DATE) , SUM(UNITS) SALES_TREND
FROM SALES
GROUP BY DATENAME(MONTH,DATE)
ORDER BY SALES_TREND

--- WANT TO ANALYSE THE SALES ON THE BASIS OF YEAR AND MONTH ONLY

SELECT DATENAME(YEAR,DATE) +'-' + DATENAME(MONTH,DATE) AS 'YEAR_MONTH',
SUM(UNITS) AS 'SALES_TRENDS'
FROM SALES
GROUP BY DATENAME(YEAR,DATE) +'-' + DATENAME(MONTH,DATE)
ORDER BY YEAR_MONTH

--NEED TO FIND COMPARISON BETWEEN THE SALES OF 2022 AND 2023 
WITH SALES_TREND AS(SELECT DATENAME(MONTH,DATE) AS 'MONTH_OF_SALES',
SUM(CASE WHEN  YEAR(DATE)=2022 THEN UNITS ELSE 0 END) AS 'SALES_2022',
SUM(CASE WHEN  YEAR(DATE)=2023 THEN UNITS ELSE 0 END) AS 'SALES_2023',
(SUM(CASE WHEN  YEAR(DATE)=2023 THEN UNITS ELSE 0 END)- SUM(CASE WHEN  YEAR(DATE)=2022 THEN UNITS ELSE 0 END)) AS 'DIFF_SALE'
FROM SALES
WHERE DATE IS NOT NULL
GROUP BY DATENAME(MONTH,DATE))

SELECT *,ROUND(CAST((DIFF_SALE*100.00/SALES_2022) AS FLOAT) ,2) AS '%_DIFF'
FROM SALES_TREND


--IN ABOVE , NEED TO GIVE LABEL FOR %_DIFF (NEGATIVE VALUE SHOULD BE 'DECLINE_IN_SALE' AND POSITIVE VALUE WILL BE 'INCLINE_IN_SALE')

WITH SALES_TREND AS(SELECT DATENAME(MONTH,DATE) AS 'MONTH_OF_SALES',
SUM(CASE WHEN  YEAR(DATE)=2022 THEN UNITS ELSE 0 END) AS 'SALES_2022',
SUM(CASE WHEN  YEAR(DATE)=2023 THEN UNITS ELSE 0 END) AS 'SALES_2023',
(SUM(CASE WHEN  YEAR(DATE)=2023 THEN UNITS ELSE 0 END)- SUM(CASE WHEN  YEAR(DATE)=2022 THEN UNITS ELSE 0 END)) AS 'DIFF_SALE'
FROM SALES
WHERE DATE IS NOT NULL
GROUP BY DATENAME(MONTH,DATE))

SELECT *,ROUND(CAST((DIFF_SALE*100.00/SALES_2022) AS FLOAT) ,2) AS '%_DIFF',
CASE WHEN DIFF_SALE<0 THEN 'DECLINE_IN_SALE'
WHEN DIFF_SALE>0 THEN 'INCLINE_IN_SALE'
ELSE ''
END AS 'LABEL'
FROM SALES_TREND



--NEED TO FIND THE  WEEKDAYS TOTAL_SALES EXCEPT WEEKENDS

SELECT DATENAME(WEEKDAY,DATE) AS 'WEEKDAY_OF_SALES',
SUM(UNITS) AS 'TOTAL_SALES'
FROM SALES
WHERE FORMAT (DATE,'yyyy') IN (2022,2023) AND DATENAME(WEEKDAY,DATE) NOT IN ('SATURDAY','SUNDAY')
GROUP BY DATENAME(WEEKDAY,DATE)
ORDER BY DATENAME(WEEKDAY,DATE)


--STORE PERFORMANCE AS PER LOCATION THEIR TOTAL_sALES AND NUMBER_OF_STORES

SELECT ST.Store_Location,COUNT(S.Store_ID) AS 'NO_OF_STORE',
SUM(S.UNITS) AS  'TOTAL_SALES'
FROM STORES ST
INNER JOIN SALES S
ON ST.Store_ID=S.Store_ID
GROUP BY ST.Store_Location
ORDER BY TOTAL_SALES DESC

--CHECK THE SALE HAPPENS IN AIRPORT

SELECT STORE_LOCATION,COUNT(STORE_ID) AS 'COUNT_OF_SALES'
FROM STORES
WHERE Store_Location='AIRPORT'
GROUP BY Store_Location


--STORE PERFORMANCE BASED INVENTORY

SELECT ST.STORE_ID,STORE_NAME,SUM(I.STOCK_ON_HAND) AS 'TOTAL_INVENTORY'
FROM STORES ST
INNER JOIN INVENTORY I
ON ST.Store_ID=I.Store_ID
GROUP BY ST.Store_ID,ST.Store_Name
ORDER  BY TOTAL_INVENTORY DESC


--PRODUCT PERFORMANCE ANALYSIS

SELECT *FROM PRODUCTS

SELECT PRODUCT_CATEGORY,PRODUCT_NAME,SUM(PRODUCT_PRICE) AS 'TOTAL_PRICE',SUM(PRODUCT_COST) AS 'TOTAL_COST'
FROM PRODUCTS
GROUP BY Product_Category,Product_Name
ORDER BY TOTAL_PRICE

--TOTAL SALES OF THE PRODUCT

SELECT P.PRODUCT_CATEGORY,P.PRODUCT_NAME,SUM(S.UNITS) AS 'TOTAL_SALES'
FROM PRODUCTS P
JOIN SALES S
ON P.Product_ID=S.Product_ID
GROUP BY Product_Category,Product_Name
ORDER BY Product_Category,Product_Name

--YOU NEED TO FIND THE TOP SELLING PRODUCT IN EACH CATERGORY

WITH PROD_PERF AS(SELECT P.PRODUCT_CATEGORY,P.PRODUCT_NAME, SUM(S.UNITS) AS 'TOP_SELL',
ROW_NUMBER() OVER (PARTITION BY PRODUCT_CATEGORY ORDER BY SUM(S.UNITS) DESC ) AS "ROW_NUM"
FROM PRODUCTS P
JOIN SALES S
ON P.Product_ID=S.Product_ID
GROUP BY Product_Category,Product_Name)

SELECT*
FROM PROD_PERF
WHERE ROW_NUM=1

--ANALYSE THE PRODUCT PERFORMANCE BASED ON PROFITIBILITY
--REVENUE(UNITS*PRODUCT_RPICE)
--PROFIT (PRODUCT_PRICE- PRODUCT_COST)

SELECT P.Product_Category, P.PRODUCT_NAME,SUM(S.UNITS) AS 'TOTAL_UNIT_SOLD' ,SUM(S.UNITS*P.PRODUCT_PRICE) AS 'REVENUE',
SUM(S.UNITS*(P.PRODUCT_PRICE - P.PRODUCT_COST)) AS 'PROFIT'
FROM PRODUCTS P
JOIN SALES S
ON P.Product_ID=S.Product_ID
GROUP BY Product_Category,Product_Name
ORDER BY PROFIT DESC

--CALCULATE THE TOTAL UNITS SOLD AND TOTAL REVENUE GENERATED BY THE LOCATION

SELECT ST.STORE_LOCATION,SUM(S.UNITS) AS 'TOTAL_UNITS_SOLD',SUM(P.PRODUCT_PRICE*S.UNITS) AS 'TOTAL_REVENUE'
FROM STORES ST
JOIN SALES S
ON ST.Store_ID=S.Store_ID
JOIN PRODUCTS P
ON P.Product_ID=S.Product_ID
GROUP BY ST.Store_Location

--NEED TO FIND THE PERCENTAGE OF TOTAL_REVENUE OF TOTAL

WITH LOCATION_PER AS(SELECT ST.STORE_LOCATION,SUM(S.UNITS) AS 'TOTAL_UNITS_SOLD',SUM(P.PRODUCT_PRICE*S.UNITS) AS 'TOTAL_REVENUE'
FROM STORES ST
JOIN SALES S
ON ST.Store_ID=S.Store_ID
JOIN PRODUCTS P
ON P.Product_ID=S.Product_ID
GROUP BY ST.Store_Location)

SELECT * ,ROUND(CAST (SUM(P.PRODUCT_PRICE*S.UNITS)*100/SUM(SUM(P.PRODUCT_PRICE*S.UNITS)) AS FLOAT),2)  AS 'TOTAL_OF_PER'
FROM LOCATION_PER

--14444572.35


--COMPANY WANTS TO ANALYSE THE 6 MONTH SALES PERFORMANCE FROM THE LAST RECORDED DATE IN OUT SALES DATA

SELECT P.Product_Name,SUM(S.UNITS) AS 'TOTAL_UNIT_SOLD',SUM(S.UNITS*P.PRODUCT_PRICE) AS 'REVENUE', SUM(P.PRODUCT_PRICE-P.PRODUCT_COST) AS 'PROFIT',DATEADD(MONTH,-6,S.DATE) AS '6_MONTHBACK'
FROM SALES S
JOIN PRODUCTS P
ON S.Product_ID=P.Product_ID
GROUP BY  P.Product_Name,DATEADD(MONTH,-6,S.DATE)

--NEED TO CHECK SALES PERFORMANCE BETWEEN '2023-06-09' AND '2023-12-09'  [FROM 6_MONTH_BACK]

SELECT P.Product_Name,SUM(S.UNITS) AS 'TOTAL_UNIT_SOLD', SUM(P.PRODUCT_PRICE-P.PRODUCT_COST) AS 'PROFIT',DATEADD(MONTH,-6,S.DATE) AS '6_MONTHBACK'
FROM SALES S
JOIN PRODUCTS P
ON S.Product_ID=P.Product_ID
WHERE DATEADD(MONTH,-6,S.DATE) BETWEEN '2023-06-09' AND '2023-12-09'
GROUP BY  P.Product_Name,DATEADD(MONTH,-6,S.DATE)

--COMPANY WANTS TO ANALYSE QUARTERLY SALES TRENDS HAPPEN OVER THE STORES

SELECT P.PRODUCT_CATEGORY,YEAR(S.DATE) AS 'YEARS',DATEPART(QUARTER,S.DATE) AS 'QUARTERLY',SUM(S.UNITS) AS 'TOTAL_UNIT_SOLD'
FROM SALES S
JOIN PRODUCTS P
ON S.Product_ID=P.Product_ID
GROUP BY P.Product_Category,YEAR(S.DATE),DATEPART(QUARTER,S.DATE)

--PREVIOUS YEAR SALES AND CURRENT YEAR SALES AND THEIR DIFFERENCE 

WITH COMP_SALE AS(SELECT P.PRODUCT_CATEGORY,YEAR(S.DATE) AS 'YEARS',DATEPART(QUARTER,S.DATE) AS 'QUARTERLY',SUM(S.UNITS) AS 'TOTAL_UNIT_SOLD'
FROM SALES S
JOIN PRODUCTS P
ON S.Product_ID=P.Product_ID
GROUP BY P.Product_Category,YEAR(S.DATE),DATEPART(QUARTER,S.DATE)) ,
PREVIOUS_YEAR_SALE AS( SELECT PRODUCT_CATEGORY,QUARTERLY,TOTAL_UNIT_SOLD AS 'PREV_YEAR_SALE'
FROM COMP_SALE
WHERE YEARS='2022'),
CURRENT_YEAR_SALE  AS(SELECT PRODUCT_CATEGORY, QUARTERLY,TOTAL_UNIT_SOLD AS 'CURR_YEAR_SALE'
FROM COMP_SALE
WHERE YEARS='2023')

SELECT C.PRODUCT_CATEGORY,C.QUARTERLY,P.PREV_YEAR_SALE,C.CURR_YEAR_SALE,C.CURR_YEAR_SALE-P.PREV_YEAR_SALE AS 'DIFFERENCE'
FROM CURRENT_YEAR_SALE C
JOIN PREVIOUS_YEAR_SALE P
ON P.PRODUCT_CATEGORY=C.PRODUCT_CATEGORY
AND C.QUARTERLY=P.QUARTERLY

--CATEGORY WISE COGS OF INVENTORY TURNOVER BETWEEN 2022 AND 2023

SELECT P.PRODUCT_CATEGORY,
SUM(CASE WHEN YEAR(S.DATE)='2022' THEN S.UNITS*P.PRODUCT_COST ELSE 0 END) AS 'COGS_2022',
SUM(CASE WHEN YEAR(S.DATE)='2023' THEN S.UNITS*P.PRODUCT_COST ELSE 0 END) AS 'COGS_2023'
FROM PRODUCTS P
JOIN SALES S
ON P.Product_ID=S.Product_ID
GROUP BY P.Product_Category

--AVERAGE INVENTORY

SELECT P.PRODUCT_CATEGORY,
AVG(CASE WHEN YEAR(S.DATE)='2022' THEN I.STOCK_ON_HAND ELSE 0 END) AS 'AVG_INV_2022',
AVG(CASE WHEN YEAR(S.DATE)='2023' THEN  I.STOCK_ON_HAND  ELSE 0 END) AS 'AVG_INV_2023'
FROM INVENTORY I
JOIN PRODUCTS P
ON I.Product_ID=P.Product_ID
JOIN SALES S
ON S.Product_ID=P.Product_ID
GROUP BY P.Product_Category


--NUMBER OF SALES EACH MONTH IN 2022. THE OUTPUT SHOULD DISPLAY THE MONTH(IN YYYYY-MM FORMAT) AND TOTAL OF SALES IN THAT MONTH. SALES_MONTH ORDERED IN ASCENDING

SELECT DATENAME(YEAR,Date)+'-'+DATENAME(MONTH,DATE) AS 'SALES_MONTH',SUM(UNITS) AS 'TOTAL_SALES'
FROM SALES
WHERE YEAR(DATE)='2022'
GROUP BY DATENAME(YEAR,Date)+'-'+DATENAME(MONTH,DATE)
ORDER BY SALES_MONTH

